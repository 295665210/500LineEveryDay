1.静态字段 静态属性 创建时间，生命周期，存放位置 （堆 栈？），使用特点。

a 创建时间:
静态字段在装载程序集的时候就分配内存空间
b 生命周期:
直到应用程程序的生命周期期结束。
c 存放; 
在堆中的类里, 与实例成员分开存放.
d 使用特点:
静态字段的值为一个类的所有实体所共享(只有一个,一改全改)；
静态属性不能通过单个对象访问，但可以使点符号，通过整个类调用：

//考虑静态字段 或 静态方法的用途

静态方法可以用于工具类,因为不用实例化类.
静态字段,可以用于计算,记录类被实例化的次数.
-----------------------	

2.静态构造函数 创建时间 生命周期 。

a 创建时间
在创建第一个实例或引用任何静态成员之前,将自动调用静态构造函数.
b 生命周期:
直到应用程程序的生命周期期结束。
c 
一个类只能有一个静态构造函数.最多只运行一次.不能继承.
用于初始化静态数据.
静态构造函数,不能有参数.

//思考用途
当类使用日志文件时，将使用这种构造函数向日志文件中写入项。(百度的,没用过,不明白)

需要在程序初始化之前 初始化的一些内容需要放在静态构造函数里
-------------------------

3.静态只读字段用法。

能被静态构造函数初始化,不能被外部修改.
-------------------------

4.属性的快速书写方式/lambda 表达方法。 属性的get 方法的lambda表达方式。

见PracticeBook.Day0120

//属性的 lambda表达式 没写  只写了 get set 的lambda表达式
补充 public int Num6 =>  _num4>90 ? 99 :10;

-------------------------

5.静态属性 用法 。

对静态字段进行封装,保证静态字段的合法性.
使用 类名.静态属性名 进行访问.

//自己思考用途 
静态数据成员,主要用在类的所有实例都有用的属性上,一是可以节省储存空间, 二是可以实现一改全改.
静态方法(属性也可以认为是一种方法),主要用于操作静态数据成员.

-------------------------
6.方法参数数量不确定的情况下，定义参数的方式。

方法参数定义使用 params关键字
-------------------------

7.引用参数 用途（递归中收集目标对象）， 输出参数的用途。输出参数的 简单定义。


见PracticeBook.Day0120
-------------------------


